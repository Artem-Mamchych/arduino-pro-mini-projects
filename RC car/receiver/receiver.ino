#include <Servo.h> 

Servo motor;
int mot_pin_right = 8;   //Подключаем правый мотор к пину 8

int js_position = 1500;  //Начальная позиция, всегда 1.5 мс для регуляторов бесколлекторных двигателей
int max_position = 2300; //Максимальное значение ШИМ 2.3 мс
int min_position = 800;  //Минимальное значени ШИМ 0.8 мс

int start = 1;  //Флаг задержки запуска

/*
Ардуиновская библиотека Servo хороша тем, что может управлять десятком сервомоторов на разных выходах, при этом ШИМ-меандры формируются программно, с использованием прерываний. Если параллельно исполняется другой код, то возникает некоторая нестабильность и мотор, даже после регулятора, будет вращаться слегка неравномерно.

Если нужно точно выдерживать скорость, лучше брать библиотеку PWMServo, которая формирует ШИМ аппаратно. При этом в зависимость от модели ардуино можно управлять двумя-тремя сервами. 
*/
void setup() 
{
  //«он начинает функционировать только при подаче на его вход ШИМ сигнала 1,5 мс» — эт всего лишь сигнал «нейтраль» подавать надо.
  motor.attach(mot_pin_right, js_position, max_position);  //Инициальзация правого мотора (порт, начальная позиция, максимальная позиция)
} 

void loop() 
{
  //Начальная установка регуляторов в нулевое положение
  if(start == 1) {
    motor.write(js_position);
    
    delay(700);
    start = 0;
  }
  
  js_position = analogRead(A0);  //Считывание положения потенциометра
  
  js_position = map(js_position, 0, 1023, 75, 140);  //Преобразование положения потенциометра в угол поворота
  motor.write(js_position);    //Записываем положение и отправляем на регулятор правого мотора
  
  delay(20);  //Задержка цикла 20 мс
}
